interface Runnable[T] {
  run(self: iso): T;
}

class Cell[T] {
  data: T | (None & imm);

  create(data: T): Cell[T] & iso {
    var result = new Cell;
    result.data = data;
    result
  }

  extract(self: mut): T | (None & imm) {
    self.data = Builtin.freeze(new None)
  }
}

class Either[T] {
  handle: cown[Cell[T]] & imm;

  of(task: Runnable[T] & iso): Either[T] & iso {
    var result = new Either;
    var promise = Promise.create();
    result.handle = (mut-view promise).wait_handle();
    when() {
      promise.fulfill(Cell.create(task.run()));
    };
    result
  }

  or[U](self: iso, task: Runnable[U] & iso): Either[T | U | (None & imm)] & iso {
    var result = new Either;
    var promise = Promise.create();
    result.handle = (mut-view promise).wait_handle();

    var return = cown.create(Cell.create(promise));

    when() {
      var c = Cell.create(task.run());
      when (return) {
        match (return.extract()) {
          var _: None => {}
          var p: Promise[Cell[T | U | (None & imm)]] => {
            p.fulfill(c);
          }
        }
      };
    };

    // OR

    when(var c = self.handle) {
      var c = Cell.create(c.extract());
      when(return) {
        match (return.extract()) {
          var _: None => {}
          var p: Promise[Cell[T | U | (None & imm)]] => {
            p.fulfill(c);
          }
        }
      }
    };

    result
  }

  get(self: iso): cown[Cell[T]] & imm {
    self.handle
  }
}

class Proc {
  id: U64 & imm;

  create(id: U64 & imm): Proc & iso {
    var result = new Proc;
    result.id = id;
    result
  }

  run(self: iso): U64Obj & iso {
    U64Obj.create(self.id)
  }
}

class StringProc {
  create(): StringProc & iso {
    var result = new StringProc;
    result
  }

  run(self: iso): Cell[String] & iso {
    Cell.create("string proc")
  }
}

class Main {
  main() {
    var p1 = Proc.create(1);
    var p2 = StringProc.create();
    var p3 = Proc.create(3);

    when(var result = ((((Either.of(p1)).or(p2))).or(p3)).get()) {
      Builtin.print("got: ");
      match (result.extract()) {
        var o: U64Obj => Builtin.print1("{:#}\n", o),
        var s: Cell[String] => Builtin.print1("{:#}\n", s),
        var _: None => Builtin.print("None\n"),
      }
    };
  }
}
