/* Barrier with promises
 *
 * A barrier object has a count of how many waiters it expects. Calling wait with a barrier decrements
 * the count of that barrier and returns a cown for the caller to wait on. When the internal signal is
 * made trigger, all signals are also triggered.
 */

use "signal.verona"

class Barrier {
  _count: U64 & imm;
  _reset: U64 & imm;
  // Internal barrier to trigger all external barriers
  _internal: Signal & iso;

  create(count: U64 & imm): cown[Barrier] & imm {
    var result = new Barrier;
    result._count = count;
    result._reset = count;
    result._internal = Signal.create();
    cown.create(result)
  }

  wait(barrier: cown[Barrier] & imm): cown[None] & imm {
    // External barrier for the waiter to wait on
    var external = Signal.create();
    var future = (mut-view external).await();

    when (barrier) {
      // When the internal barrier triggers, trigger the external barrier, this
      // means that all external barriers trigger at the same time.
      when (var _ = (mut-view (barrier._internal)).await()) {
        (mut-view external).signal();
      };

      // Once the countdown hits zero, trigger the internal barrier
      barrier._count = barrier._count - 1;
      if (barrier._count == 0) {
        (mut-view (barrier._internal)).signal();
        barrier._count = barrier._reset;
      }
    };

    future
  }
}
