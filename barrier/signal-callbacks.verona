use "../list.verona"

/*
 * An interface for signal callbacks.
 */
interface SignalCallback {
  apply(self: mut);
}

/*
 * A node to wrap the callback
 */
class SignalCallbackNode {
  _callback: SignalCallback & iso;

  create(callback: SignalCallback & iso): SignalCallbackNode & iso {
    var result = new SignalCallbackNode;
    result._callback = callback;
    result
  }

  apply(self: iso) {
    (mut-view (self._callback)).apply();
  }
}

/*
 * A signal is a list of waiting callbacks.
 * Calling await enqueues a new callback.
 * Calling signal dequeus and runs all waiting callbacks.
 */
class Signal {
  _waiters: Queue[SignalCallbackNode] & iso;

  create(): Signal & iso {
    var result = new Signal;
    result._waiters = Queue.create(0);
    result
  }

  // create a new waiting call back
  await(self: mut, callback: SignalCallback & iso) {
    (mut-view (self._waiters)).add(SignalCallbackNode.create(callback));
  }

  _run_queue(self: mut) {
    match (mut-view (self._waiters)).remove() {
      var _: None => {} // all waiters have started running
      var c: SignalCallbackNode => {
        when() { c.apply(); };
        self._run_queue();
      }
    }
  }

  // dispatch all waiting callbacks
  signal(self: mut) {
    self._run_queue();
  }
}