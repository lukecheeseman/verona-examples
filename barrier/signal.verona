class Signal {
  _signal: Promise[None] & iso;

  create(): Signal & iso {
    var result = new Signal;
    result._signal = Promise.create();
    result
  }

  /* allocate a new promise per call to await and hand
   * the caller its future, when the internal promise
   * is fulfilled, the external promise will be fulfilled.
   * We do not give a future to the internal promise as only
   * one behaviour can access a promise at a time, therefore
   * we will trigger each external signal one after the other
   * and enable waiting behaviours to run at the same time
   * instead of serialising waiting behaviours
   */
  await(self: mut): cown[None] & imm {
    var p = Promise.create();
    var f = (mut-view p).wait_handle();
    when(var _ = (mut-view (self._signal)).wait_handle()) {
      p.fulfill(new None);
    };
    f
  }

  signal(self: mut) {
    (self._signal = Promise.create()).fulfill(new None);
  }

}
