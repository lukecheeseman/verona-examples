/* Barrier with promises
 *
 * Create three participants that synchronise at the same point in a method, here scheduling
 * is done internally by the participant.
 *
 * A signal object has a count of how many waiters it expects. Waiting on a signal decrements
 * the count and returns a cown for the waiter to wait on. When the internal signal is made
 * available (i.e. the promise is fulfilled), all external promises (those held by participants)
 * will also be fulfilled.
 *
 * The three participants use a shared signal to synchronise, once each participant has executed
 * pre() they wait for the signal, when all three have reached the wait then they can all execute
 * post().
 *
 * Observations: The participant can place all behaviour in a single method and they have fine
 * grained control over the location of the synchronisation point. Signalling can be slightly
 * messy, the internal signal could be exposed so that there are no internal/external signals
 * but a single signal that all participants wait for, however it places more onus on the
 * participant to acquire the signal and schedule a behaviour when the signal is fulfilled.
 */

class Barrier {
  _count: U64 & imm;
  _reset: U64 & imm;
  // Internal barrier to trigger all external barriers
  _barrier: Promise[None] & iso;

  create(count: U64 & imm): cown[Barrier] & imm {
    var result = new Barrier;
    result._count = count;
    result._reset = count;
    result._barrier = Promise.create();
    cown.create(result)
  }

  wait(barrier: cown[Barrier] & imm): cown[None] & imm {
    // External barrier for the waiter to wait on
    var promise = Promise.create();
    var handle = (mut-view promise).wait_handle();

    when (barrier) {
      // When the internal barrier triggers, trigger the external barrier, this
      // means that all external barriers trigger at the same time.
      when (var _ = (mut-view (barrier._barrier)).wait_handle()) {
        promise.fulfill(new None);
      };

      // Once the countdown hits zero, trigger the internal barrier
      barrier._count = barrier._count - 1;
      if (barrier._count == 0) {
        (barrier._barrier = Promise.create()).fulfill(new None);
        barrier._count = barrier._reset;
      }
    };

    handle
  }
}
