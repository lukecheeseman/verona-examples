/* Use of Barrier class
 *
 * Create three participants that synchronise at the same point in a method, here scheduling
 * is done internally by the participant.
 *
 * The three participants use a shared barrier to synchronise, once each participant has executed
 * pre() they wait, when all three have reached the barrier then they can all execute post().
 *
 * Observations: The participant can place all behaviour in a single method and they have fine
 * grained control over the location of the synchronisation point.
 */

use "barrier.verona"

class Participant {
  _id: U64 & imm;
  _barrier: cown[Barrier] & imm;

  create(id: U64 & imm, barrier: cown[Barrier] & imm): Participant & iso {
    var result = new Participant;
    result._id = id;
    result._barrier = barrier;
    result
  }

  run(self: iso) {
    when() {
      // Run the pre behaviour
      Builtin.print1("Pre: {:#}\n", self._id);

      Builtin.print1("----- Barrier reached {} ------\n", self._id);
      // When the barrier is fulfilled run the post behaviour
      when (var _ = Barrier.wait(self._barrier)) {
        Builtin.print1("Mid: {:#}\n", self._id);

        Builtin.print1("----- Barrier reached {} ------\n", self._id);
        when (var _ = Barrier.wait(self._barrier)) {
          Builtin.print1("Post: {:#}\n", self._id);
        }
      }
    }
  }
}

class Main {
  main() {
    var barrier = Barrier.create(3);
    var p1 = Participant.create(1, barrier);
    var p2 = Participant.create(2, barrier);
    var p3 = Participant.create(3, barrier);

    p1.run();
    p2.run();
    p3.run();
  }
}
