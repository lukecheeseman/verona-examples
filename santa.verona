class Node[T: iso | mut] {
  value: T | (None & imm);
  next: (Node[T] & mut) | (None & imm);
}

class List[T: iso | mut] {
  head: (Node[T] & mut) | (None & imm);
  size: U64;
  none: (None & imm);

  init(self: mut) {
    self.none = freeze (new None);
    self.head = self.none;
    self.size = 0;
  }

  create(): List[T] & iso {
    var result = new List;
    result.none = freeze (new None);
    result.head = result.none;
    result.size = 0;
    result
  }

  push(self: mut, value: T) {
    self.head = self._push(self.head = self.none, value);
    self.size = self.size + 1;
  }

  _push(self: mut,
          current: (Node[T] & mut) | (None & imm),
          value: T): (Node[T] & mut) {
    match current
    {
      var e: None => {
        var node = new Node in self;
        node.value = value;
        node.next = self.none;
        node
      },
      var n: Node[T] => {
        n.next = self._push(n.next = self.none, value);
        n
      }
    }
  }

  pop(self: mut): T | (None & imm) {
    match (self.head = self.none) {
      var e: None => e,
      var n: Node[T] => {
        self.head = (n.next = self.none);
        self.size = self.size - 1;
        n.value = self.none
      }
    }
  }
}

class Group[T: iso | mut] {
  capacity: U64;
  data: List[T] & mut;

  create(capacity: U64): Group[T] & iso {
    var result = new Group;
    result.capacity = capacity;
    var data = mut-view(new List in result);
    data.init();
    result.data = data;
    result
  }

  full(self: mut): U64 {
    (self.data).size >= self.capacity
    
  }

  join(self: mut, value: T) {
    (self.data).push(value);
  }

  pop(self: mut): T | (None & imm) {
    (self.data).pop()
  }

}

class Reindeer {
  group: cown[Group[Reindeer & iso]];
  id: U64;

  create(group: cown[Group[Reindeer & iso]], id: U64): Reindeer & iso {
    var result = new Reindeer;
    result.group = group;
    result.id = id;
    result
  } 

  ready(self: iso) {
    when (var g = self.group) {
      g.join(self);
    }
  }

  graze(self: iso): Reindeer & iso {
    var i = 0;
    while (i < 3000000) {
      i = i + 1;
    };
    self
  }

  deliver_toys(self: iso): Reindeer & iso {
    Builtin.print1("Reindeer {:#} is delivering toys\n", self.id);
    self
  }
}

class Elf {
  group: cown[Group[Elf & iso]];
  id: U64;

  create(group: cown[Group[Elf & iso]], id: U64): Elf & iso {
    var result = new Elf;
    result.group = group;
    result.id = id;
    result
  } 

  ready(self: iso) {
    when (var g = self.group) {
      g.join(self);
    }
  }

  holiday(self: iso): Elf & iso {
    var i = 0;
    while (i < 2000000) {
      i = i + 1;
    };
    self
  }

  meet_in_study(self: iso): Elf & iso {
    Builtin.print1("Elf {:#} is meeting in study\n", self.id);
    self
  }
}

class Santa {
  create(): Santa & iso {
    new Santa
  }

  deliver_toys(self: mut) {
    Builtin.print("Santa is delivering toys\n");
  }

  meet_in_study(self: mut) {
    Builtin.print("Santa is meeting in study\n");
  }

  sleep(self: iso): Santa {
    var i = 0;
    while (i < 4000000) {
      i = i + 1;
    };
    self
  }
}

class Workshop {
  start(santa: cown[Santa],
        reindeer_group: cown[Group[Reindeer & iso]],
        elf_group: cown[Group[Elf & iso]]) {
    Workshop.deliver_toys(santa, reindeer_group);
    Workshop.meet_in_study(santa, elf_group);
  }

  reindeer_deliver(v: (Reindeer & iso) | (None & imm)) {
    match v  {
      var n: None => None,
      var r: Reindeer => {
        r = r.deliver_toys(); 
        when() {
          (r.graze()).ready();
        }
      }
    };
  }

  deliver_toys(santa: cown[Santa], reindeer_group: cown[Group[Reindeer & iso]]) {
    when(var s = santa, var g = reindeer_group) {
      if (g.full()) {
        s = s.deliver_toys();
        /*
          promise_test(i: U64)
          {
            var p = Promise.create();
            var r = (mut-view p).wait_handle();
            when(r) { U64Obj.print(r) };
            Builtin.print1("{}\n", i + 1);
            var v = new U64Obj;
            v.v = i + 2;
            p.fulfill(v);
            Builtin.print1("{}\n", i + 3);
          }
          santa promise
        when() { s.sleep(); };
        */
        Workshop.reindeer_deliver(g.pop());
        Workshop.reindeer_deliver(g.pop());
        Workshop.reindeer_deliver(g.pop());
        Workshop.reindeer_deliver(g.pop());
        Workshop.reindeer_deliver(g.pop());
        Workshop.reindeer_deliver(g.pop());
        Workshop.reindeer_deliver(g.pop());
        Workshop.reindeer_deliver(g.pop());
        Workshop.reindeer_deliver(g.pop());
        Builtin.print("========================\n");
      } else {

      };
      Workshop.deliver_toys(santa, reindeer_group);
    };
  }


  meet_elf(v: (Elf & iso) | (None & imm)) {
    match v  {
      var n: None => None,
      var e: Elf => {
        e = e.meet_in_study(); 
        when() {
          (e.holiday()).ready();
        }
      }
    };
  }

  meet_in_study(santa: cown[Santa], elf_group: cown[Group[Elf & iso]]) {
    when(var s = santa, var g = elf_group) {
      if (g.full()) {
        s.meet_in_study();
        Workshop.meet_elf(g.pop());
        Workshop.meet_elf(g.pop());
        Workshop.meet_elf(g.pop());
        Builtin.print("========================\n");
      } else {

      };
      Workshop.meet_in_study(santa, elf_group);
    };
  }
}

class Main {
  main() {
    var reindeer_group = cown(Group.create(4));

    var r0 = Reindeer.create(reindeer_group, 0);
    var r1 = Reindeer.create(reindeer_group, 1);
    var r2 = Reindeer.create(reindeer_group, 2);
    var r3 = Reindeer.create(reindeer_group, 3);
    var r4 = Reindeer.create(reindeer_group, 4);
    var r5 = Reindeer.create(reindeer_group, 5);
    var r6 = Reindeer.create(reindeer_group, 6);
    var r7 = Reindeer.create(reindeer_group, 7);
    var r8 = Reindeer.create(reindeer_group, 8);

    r0.ready();
    r1.ready();
    r2.ready();
    r3.ready();
    r4.ready();
    r5.ready();
    r6.ready();
    r7.ready();
    r8.ready();

    var elf_group = cown(Group.create(3));

    var e0 = Elf.create(elf_group, 0);
    var e1 = Elf.create(elf_group, 1);
    var e2 = Elf.create(elf_group, 2);
    var e3 = Elf.create(elf_group, 3);
    var e4 = Elf.create(elf_group, 4);
    var e5 = Elf.create(elf_group, 5);
    var e6 = Elf.create(elf_group, 6);
    var e7 = Elf.create(elf_group, 7);
    var e8 = Elf.create(elf_group, 8);
    var e9 = Elf.create(elf_group, 9);

    e0.ready();
    e1.ready();
    e2.ready();
    e3.ready();
    e4.ready();
    e5.ready();
    e6.ready();
    e7.ready();
    e8.ready();
    e9.ready();

    var santa = cown(Santa.create());

    Workshop.start(santa, reindeer_group, elf_group);
  }
}
