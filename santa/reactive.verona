use "../common/list.verona"

class Cell[T] {
  _data: (T & iso) | (None & imm);

  create(data: T & iso): Cell[T] & iso {
    var result = new Cell;
    result._data = data;
    result
  }

  extract(self: iso): (T & iso) | (None & imm) {
    self._data = Builtin.freeze(new None)
  }
}

interface Request[T] {
  count(self: imm): U64 & imm;
  apply(self: imm, args: Queue[Cell[T]] & iso);
}

class Group[T] {
  _resources: Queue[Cell[T]] & iso;
  _request: (Request[T] & imm) | (None & imm);

  create(): cown[Group[T]] & imm {
    var result = new Group;
    result._resources = Queue.create(0);
    result._request = None.create();
    cown.create(result)
  }

  // Recursion type checks quicker than iteration
  _construct_subgroup(resources: Queue[Cell[T]] & mut, subgroup: Queue[Cell[T]] & mut, n: U64 & imm) {
    if n > 0 {
      match (resources.remove()) {
        var _: None => { /* Shouldn't happen as we checked we had enough */ }
        var r: Cell[T] => {
          (mut-view subgroup).add(r);
          Group._construct_subgroup(resources, subgroup, n - 1);
        }
      };
    };
  }

  _process(group: cown[Group[T]] & imm) {
    when(var g = group) {
      match g._request {
        var _: None => { /* do nothing */ }
        var request: Request[T] => {
          var required = request.count();
          if (g._resources).length >= required {
            var subgroup = Queue.create(3);
            Group._construct_subgroup(mut-view (g._resources), mut-view subgroup, required);
            request.apply(subgroup);

            /* Keep going as we might be able to create more reactions */
            Group._process(group);
          };
        }
      }
    }
  }

  add(group: cown[Group[T]] & imm, resource: Cell[T] & iso) {
    when(var g = group) {
      (mut-view (g._resources)).add(resource);
    };
    Group._process(group);
  }

  request(group: cown[Group[T]] & imm, request: Request[T] & imm) {
    when(var g = group) {
      g._request = request;
    };
    Group._process(group);
  }
}

class Reindeer {}
class Elf {}
class Santa {}

class RequestSubgroup[T] {
  size: U64 & imm;
  work: Work & imm;
  waiting: cown[Queue[Queue[Cell[T]]]] & imm;

  create(size: U64 & imm, work: Work & imm, waiting: cown[Queue[Queue[Cell[T]]]] & imm): RequestSubgroup[T] & imm {
    var result = new RequestSubgroup;
    result.size = size;
    result.work = work;
    result.waiting = waiting;
    Builtin.freeze(result)
  }

  count(self: imm): U64 & imm { self.size }

  apply(self: imm, subgroup: Queue[Cell[T]] & iso) {
    (self.work)._add_waiting(self.waiting, subgroup);
  }
}

class Work {
  santa: cown[Santa] & imm;
  elves: cown[Group[Elf]] & imm;
  reindeer: cown[Group[Reindeer]] & imm;

  waiting_elves: cown[Queue[Queue[Cell[Elf]]]] & imm;
  waiting_reindeer: cown[Queue[Queue[Cell[Reindeer]]]] & imm;

  // Do these recursively as they type check much quicker that iteration
  _create_elves(group: cown[Group[Elf]] & imm, n: U64 & imm) {
    if n > 0 {
      Group.add(group, Cell.create(new Elf));
      Work._create_elves(group, n - 1);
    }
  }

  _create_reindeer(group: cown[Group[Reindeer]] & imm, n: U64 & imm) {
    if n > 0 {
      Group.add(group, Cell.create(new Reindeer));
      Work._create_reindeer(group, n - 1);
    }
  }

  create() {
    var result = new Work;
    result.santa = cown.create(new Santa);

    result.elves = Group.create();
    result.reindeer = Group.create();
    result.waiting_elves = cown.create(Queue.create(4));
    result.waiting_reindeer = cown.create(Queue.create(5));

    // The groups are all set up so freeze everything so we can
    // share the record to where it needs to be referenced
    var work = Builtin.freeze(result);

    Group.request(work.elves, RequestSubgroup.create(3, work, work.waiting_elves));
    Group.request(work.reindeer, RequestSubgroup.create(9, work, work.waiting_reindeer));

    Work._create_elves(work.elves, 10);
    Work._create_reindeer(work.reindeer, 9);
  }

  _return[T](group: cown[Group[T]] & imm, subgroup: Queue[Cell[T]] & iso) {
    match (mut-view subgroup).remove() {
      var _: None => { /* We're done */ }
      var member: Cell[T] => {
        Group.add(group, member);
        Work._return(group, subgroup);
      }
    }
  }

  _process(self: imm) {
    when(var santa = self.santa, var elves = self.waiting_elves, var reindeer = self.waiting_reindeer) {
      match reindeer.remove() { /* prioritise the reindeer */
        var _: None => {
          match elves.remove() {
            var _: None => { /* there was no work */ }
            var elves: Queue[Cell[Elf]] => {
              Builtin.print("Elves and Santa meet to Work\n");
              Work._return(self.elves, elves);
              self._process();
            }
          }
        }

        var reindeer: Queue[Cell[Reindeer]] => {
          Builtin.print("Reindeer and Santa meet to work\n");
          Work._return(self.reindeer, reindeer);
          self._process();
        }
      }
    }
  }

  _add_waiting[T](self: imm, waiting: cown[Queue[Queue[Cell[T]]]] & imm, subgroup: Queue[Cell[T]] & iso) {
    when(waiting) {
      waiting.add(subgroup);
      self._process();
    };
  }
}

class Main {
  main() {
    Work.create();
  }
}