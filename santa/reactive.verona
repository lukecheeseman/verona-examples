use "../common/list.verona"

class Reindeer {}
class Elf {}
class Santa {}

interface Creater[T] { generate(self: imm): T & iso; }
class ReindeerCreater {
  create(): ReindeerCreater & imm { Builtin.freeze(new ReindeerCreater) }
  generate(self: imm): Reindeer & iso { new Reindeer }
}
class ElfCreater {
  create(): ElfCreater & imm { Builtin.freeze(new ElfCreater) }
  generate(self: imm): Elf & iso { new Elf }
}

class Cell[T] {
  _data: (T & iso) | (None & imm);

  create(data: T & iso): Cell[T] & iso {
    var result = new Cell;
    result._data = data;
    result
  }
}

class MemberInfo[T] {
  group: cown[Queue[Cell[T]]] & imm;
  threshold: U64 & imm;
  waiting: cown[Queue[Queue[Cell[T]]]] & imm;

  create(threshold: U64 & imm): MemberInfo[T] & imm {
    var result = new MemberInfo;
    result.group = cown.create(Queue.create(0));
    result.threshold = threshold;
    result.waiting = cown.create(Queue.create(0));
    Builtin.freeze(result)
  }
}

class Work {
  santa: cown[Santa] & imm;
  reindeer_info: MemberInfo[Reindeer] & imm;
  elf_info: MemberInfo[Elf] & imm;

  // Do these recursively as they type check much quicker than iteratively
  take_members[T](group: Queue[Cell[T]] & mut, n: U64 & imm): Queue[Cell[T]] & iso {
    if n > 0 {
      var subgroup = Work.take_members(group, n - 1);
      match group.remove() {
        var _: None => { /* we checked we had enough */ }
        var member: Cell[T] => { (mut-view subgroup).add(member); }
      };
      subgroup
    } else {
      Queue.create(0)
    }
  }

  add_member[T](self: imm, member: Cell[T] & iso, info: MemberInfo[T] & imm) {
    when(var group = info.group) {
      group.add(member);
      if group.length >= info.threshold {
        var subgroup = Work.take_members(group, info.threshold);
        when(var waiting = info.waiting) {
          waiting.add(subgroup);
          self.process();
        }
      }
    }
  }

  return_members[T](self: imm, subgroup: Queue[Cell[T]] & iso, info: MemberInfo[T] & imm) {
    match (mut-view subgroup).remove() {
      var _: None => { /* We're done */ }
      var member: Cell[T] => {
        self.add_member(member, info);
        self.return_members(subgroup, info);
      }
    }
  }

  process(self: imm) {
    when(var santa = self.santa, var elves = (self.elf_info).waiting, var reindeer = (self.reindeer_info).waiting) {
      match reindeer.remove() { /* prioritise the reindeer */
        var reindeer: Queue[Cell[Reindeer]] => {
          when() {
            Builtin.print("Reindeer and Santa meet to work\n");
            self.return_members(reindeer, self.reindeer_info);
          };
        }

        var _: None => {
          match elves.remove() {
            var elves: Queue[Cell[Elf]] => {
              when() {
                Builtin.print("Elves and Santa meet to Work\n");
                self.return_members(elves, self.elf_info);
              };
            }

            var _: None => { /* there was no work */ }
          }
        }
      }
    }
  }

  create_members[T](self: imm, creater: Creater[T] & imm, n: U64 & imm, info: MemberInfo[T] & imm) {
    if n > 0 {
      self.add_member(Cell.create(creater.generate()), info);
      self.create_members(creater, n - 1, info);
    }
  }

  create() {
    var result = new Work;

    result.santa = cown.create(new Santa);
    result.reindeer_info = MemberInfo.create(9);
    result.elf_info = MemberInfo.create(3);

    // The groups are all set up so freeze everything so we can
    // share the record to where it needs to be referenced
    var work = Builtin.freeze(result);

    when() { work.create_members(ReindeerCreater.create(), 9, work.reindeer_info); };
    when() { work.create_members(ElfCreater.create(), 3, work.elf_info); }
  }
}

class Main {
  main() {
    Work.create();
  }
}