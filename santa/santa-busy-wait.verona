class Node[T: iso | mut] {
  value: T | (None & imm);
  next: (Node[T] & mut) | (None & imm);
}

class List[T: iso | mut] {
  _head: (Node[T] & mut) | (None & imm);
  _size: U64;
  _none: (None & imm);

  init(self: mut) {
    self._none = freeze (new None);
    self._head = self._none;
    self._size = 0;
  }

  create(): List[T] & iso {
    var result = new List;
    result._none = freeze (new None);
    result._head = result._none;
    result._size = 0;
    result
  }

  push(self: mut, value: T) {
    self._head = self._push(self._head = self._none, value);
    self._size = self._size + 1;
  }

  _push(self: mut,
          current: (Node[T] & mut) | (None & imm),
          value: T): (Node[T] & mut) {
    match current
    {
      var e: None => {
        var node = new Node in self;
        node.value = value;
        node.next = self._none;
        node
      },
      var n: Node[T] => {
        n.next = self._push(n.next = self._none, value);
        n
      }
    }
  }

  pop(self: mut): T | (None & imm) {
    match (self._head = self._none) {
      var e: None => e,
      var n: Node[T] => {
        self._head = (n.next = self._none);
        self._size = self._size - 1;
        n.value = self._none
      }
    }
  }

  size(self: mut): U64 {
    self._size
  }
}

class Group[T: iso | mut] {
  _capacity: U64;
  _data: List[T] & mut;

  create(capacity: U64): Group[T] & iso {
    var result = new Group;
    result._capacity = capacity;
    var data = mut-view(new List in result);
    data.init();
    result._data = data;
    result
  }

  full(self: mut): U64 {
    (self._data).size() >= self._capacity
    
  }

  join(self: mut, value: T) {
    (self._data).push(value);
  }

  pop(self: mut): T | (None & imm) {
    (self._data).pop()
  }

  capacity(self: iso): U64 {
    self._capacity
  }
}

class Reindeer {
  _group: cown[Group[Reindeer & iso]];
  _id: U64;

  create(group: cown[Group[Reindeer & iso]], id: U64): Reindeer & iso {
    var result = new Reindeer;
    result._group = group;
    result._id = id;
    result
  } 

  ready(self: iso) {
    when (var g = self._group) {
      g.join(self);
    }
  }

  graze(self: iso): Reindeer & iso {
    // This should be some sleep
    var i = 0;
    while (i < 2000000) {
      i = i + 1;
    };
    self
  }

  deliver_toys(self: iso): Reindeer & iso {
    Builtin.print1("Reindeer {:#} is delivering toys\n", self._id);
    self
  }
}

class Elf {
  _group: cown[Group[Elf & iso]];
  _id: U64;

  create(group: cown[Group[Elf & iso]], id: U64): Elf & iso {
    var result = new Elf;
    result._group = group;
    result._id = id;
    result
  } 

  ready(self: iso) {
    when (var g = self._group) {
      g.join(self);
    }
  }

  holiday(self: iso): Elf & iso {
    // This should be some sleep
    var i = 0;
    while (i < 2000000) {
      i = i + 1;
    };
    self
  }

  meet_in_study(self: iso): Elf & iso {
    Builtin.print1("Elf {:#} is meeting in study\n", self._id);
    self
  }
}

class Santa {
  create(): Santa & iso {
    new Santa
  }

  deliver_toys(self: mut) {
    Builtin.print("Santa is delivering toys\n");
  }

  meet_in_study(self: mut) {
    Builtin.print("Santa is meeting in study\n");
  }
}

class Workshop {
  run() {
    var reindeer_group = cown(Group.create(9));
    var i = 0;
    while i < 9 {
      (Reindeer.create(reindeer_group, i)).ready();
      i = i + 1;
    };

    var elf_group = cown(Group.create(3));
    i = 0;
    while i < 10 {
      (Elf.create(elf_group, i)).ready();
      i = i + 1;
    };

    var santa = cown(Santa.create());

    Workshop._deliver_toys(santa, reindeer_group);
    Workshop._meet_in_study(santa, elf_group);
  }

  _reindeer_deliver(v: (Reindeer & iso) | (None & imm)) {
    match v  {
      var n: None => None,
      var r: Reindeer => {
        r = r.deliver_toys(); 
        when() {
          (r.graze()).ready();
        }
      }
    };
  }

  _reindeer_dispatch(g: Group[Reindeer & iso] & mut) {
    var i = 0;
    while (i < 9) {
      Workshop._reindeer_deliver(g.pop());
      i = i + 1;
    };
  }

  _deliver_toys(santa: cown[Santa], reindeer_group: cown[Group[Reindeer & iso]]) {
    when(var s = santa, var g = reindeer_group) {
      if (g.full()) {
        s = s.deliver_toys();
        Workshop._reindeer_dispatch(g);
        Builtin.print("========================\n");
      } else {

      };
      Workshop._deliver_toys(santa, reindeer_group);
    };
  }


  _elf_meet(v: (Elf & iso) | (None & imm)) {
    match v  {
      var n: None => None,
      var e: Elf => {
        e = e.meet_in_study(); 
        when() {
          (e.holiday()).ready();
        }
      }
    };
  }

  _elf_dispatch(g: Group[Elf & iso] & mut) {
    var i = 0;
    while (i < 3) {
      Workshop._elf_meet(g.pop());
      i = i + 1;
    };
  }

  _meet_in_study(santa: cown[Santa], elf_group: cown[Group[Elf & iso]]) {
    when(var s = santa, var g = elf_group) {
      if (g.full()) {
        s.meet_in_study();
        Workshop._elf_dispatch(g);
        Builtin.print("========================\n");
      } else {

      };
      Workshop._meet_in_study(santa, elf_group);
    };
  }
}

class Main {
  main() {
    Workshop.run();
  }
}
