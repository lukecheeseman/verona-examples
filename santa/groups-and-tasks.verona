use "../list.verona"

interface Task[T] {
  promise(self: mut): Promise[T] & iso;
}

class DeliverToys {
  _santa: cown[Santa] & imm;

  create(santa: cown[Santa] & imm): DeliverToys & iso {
    var result = new DeliverToys;
    result._santa = santa;
    result
  }

  _reindeer_deliver(v: (Reindeer & iso) | (None & imm)) {
    match v  {
      var n: None => None,
      var r: Reindeer => {
        r = r.deliver_toys();
        r.holiday();
      }
    };
  }

  promise(self: mut): Promise[Queue[Reindeer]] & iso {
    var p = Promise.create();
    var g = (mut-view p).wait_handle();
    when (g, var s = self._santa) {
      s.deliver_toys();
      // This is kind of odd as each reindeer delivers a toy and then goes
      // on holiday. Should probably be, all deliver and then all go on holiday.
      while g.length > 0 {
        DeliverToys._reindeer_deliver(g.remove());
      };
      Builtin.print("=============================\n");
    };
    p
  }
}

class MeetInStudy {
  _santa: cown[Santa] & imm;

  create(santa: cown[Santa] & imm): MeetInStudy & iso {
    var result = new MeetInStudy;
    result._santa = santa;
    result
  }

  _elf_meet(v: (Elf & iso) | (None & imm)) {
    match v  {
      var n: None => None,
      var e: Elf => {
        e = e.meet_in_study();
        e.work();
      }
    };
  }

  promise(self: mut): Promise[Queue[Elf]] & iso {
    var p = Promise.create();
    var g = (mut-view p).wait_handle();
    when (g, var s = self._santa) {
      s.meet_in_study();
      while g.length > 0 {
        MeetInStudy._elf_meet(g.remove());
      };
      Builtin.print("=============================\n");
    };
    p
  }
}

class Group[T] {
  _capacity: U64 & imm;
  _promise: Promise[Queue[T]] & iso;
  _task: Task[Queue[T]] & iso;
  _data: Queue[T] & iso;

  create(capacity: U64 & imm, task: Task[Queue[T]] & iso): Group[T] & iso {
    var result = new Group;
    result._capacity = capacity;
    result._promise = (mut-view task).promise();
    result._task = task;
    result._data = Queue.create(0);
    result
  }

  full(self: mut): U64 & imm {
    (mut-view (self._data)).length >= self._capacity
  }

  add(self: mut, value: T & iso) {
    (mut-view (self._data)).add(value);
    if self.full() {
      var old = (self._promise = (mut-view (self._task)).promise());
      old.fulfill(self._data = Queue.create(0))
    }
  }

  remove(self: mut): (T & iso) | (None & imm) {
    (mut-view (self._data)).remove()
  }
}

class Reindeer {
  _group: cown[Group[Reindeer]] & imm;
  _id: U64 & imm;

  create(group: cown[Group[Reindeer]] & imm, id: U64 & imm) {
    var result = new Reindeer;
    result._group = group;
    result._id = id;
    result.ready();
  }

  ready(self: iso) {
    when (var g = self._group) {
      g.add(self);
    }
  }

  holiday(self: iso) {
    // This should be some sleep
    when() {
      var i = 0;
      while (i < 2000000) {
        i = i + 1;
      };
      self.ready();
    }
  }

  deliver_toys(self: iso): Reindeer & iso {
    Builtin.print1("Reindeer {:#} is delivering toys\n", self._id);
    self
  }
}

class Elf {
  _group: cown[Group[Elf]] & imm;
  _id: U64 & imm;

  create(group: cown[Group[Elf]] & imm, id: U64 & imm) {
    var result = new Elf;
    result._group = group;
    result._id = id;
    result.ready();
  }

  ready(self: iso) {
    when (var g = self._group) {
      g.add(self);
    }
  }

  work(self: iso) {
    // This should be some sleep
    when() {
      var i = 0;
      while (i < 2000000) {
        i = i + 1;
      };
      self.ready();
    }
  }

  meet_in_study(self: iso): Elf & iso {
    Builtin.print1("Elf {:#} is meeting in study\n", self._id);
    self
  }
}

class Santa {
  create(): Santa & iso {
    new Santa
  }

  deliver_toys(self: mut) {
    Builtin.print("Santa is delivering toys\n");
  }

  meet_in_study(self: mut) {
    Builtin.print("Santa is meeting in study\n");
  }
}

class Workshop {
  run() {
    var santa = cown.create(Santa.create());

    var rt = DeliverToys.create(santa);
    var rg = cown.create(Group.create(9, rt));

    var i = 0;
    while i < 9 {
      Reindeer.create(rg, i);
      i = i + 1;
    };

    var et = MeetInStudy.create(santa);
    var eg = cown.create(Group.create(3, et));
    i = 0;
    while i < 10 {
      Elf.create(eg, i);
      i = i + 1;
    }
  }
}

class Main {
  main() {
    Workshop.run();
  }
}
