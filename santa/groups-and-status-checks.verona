use "../common/list.verona"

class Group[T] {
  _capacity: U64 & imm;
  _data: Queue[T] & iso;

  create(capacity: U64 & imm): Group[T] & iso {
    var result = new Group;
    result._capacity = capacity;
    result._data = Queue.create(0);;
    result
  }

  full(self: mut): U64 & imm {
    (self._data).length >= self._capacity

  }

  join(self: mut, value: T & iso) {
    (mut-view (self._data)).add(value);
  }

  pop(self: mut): (T & iso) | (None & imm) {
    (mut-view (self._data)).remove()
  }

  capacity(self: iso): U64 & imm {
    self._capacity
  }
}

class Reindeer {
  _group: cown[Group[Reindeer]] & imm;
  _id: U64 & imm;

  create(group: cown[Group[Reindeer]] & imm, id: U64 & imm): Reindeer & iso {
    var result = new Reindeer;
    result._group = group;
    result._id = id;
    result
  }

  ready(self: iso) {
    when (var g = self._group) {
      g.join(self);
    }
  }

  graze(self: iso): Reindeer & iso {
    // This should be some sleep
    var i = 0;
    while (i < 2000000) {
      i = i + 1;
    };
    self
  }

  deliver_toys(self: iso): Reindeer & iso {
    Builtin.print1("Reindeer {:#} is delivering toys\n", self._id);
    self
  }
}

class Elf {
  _group: cown[Group[Elf]] & imm;
  _id: U64 & imm;

  create(group: cown[Group[Elf]] & imm, id: U64 & imm): Elf & iso {
    var result = new Elf;
    result._group = group;
    result._id = id;
    result
  }

  ready(self: iso) {
    when (var g = self._group) {
      g.join(self);
    }
  }

  holiday(self: iso): Elf & iso {
    // This should be some sleep
    var i = 0;
    while (i < 2000000) {
      i = i + 1;
    };
    self
  }

  meet_in_study(self: iso): Elf & iso {
    Builtin.print1("Elf {:#} is meeting in study\n", self._id);
    self
  }
}

class Santa {
  create(): Santa & iso {
    new Santa
  }

  deliver_toys(self: mut) {
    Builtin.print("Santa is delivering toys\n");
  }

  meet_in_study(self: mut) {
    Builtin.print("Santa is meeting in study\n");
  }
}

class Workshop {
  run() {
    var reindeer_group = cown.create(Group.create(9));
    var i = 0;
    while i < 9 {
      (Reindeer.create(reindeer_group, i)).ready();
      i = i + 1;
    };

    var elf_group = cown.create(Group.create(3));
    i = 0;
    while i < 10 {
      (Elf.create(elf_group, i)).ready();
      i = i + 1;
    };

    var santa = cown.create(Santa.create());

    Workshop._deliver_toys(santa, reindeer_group);
    Workshop._meet_in_study(santa, elf_group);
  }

  _reindeer_deliver(v: (Reindeer & iso) | (None & imm)) {
    match v  {
      var n: None => None,
      var r: Reindeer => {
        r = r.deliver_toys();
        when() {
          (r.graze()).ready();
        }
      }
    };
  }

  _reindeer_dispatch(g: Group[Reindeer] & mut) {
    var i = 0;
    while (i < 9) {
      Workshop._reindeer_deliver(g.pop());
      i = i + 1;
    };
  }

  _deliver_toys(santa: cown[Santa] & imm, reindeer_group: cown[Group[Reindeer]] & imm) {
    when(var s = santa, var g = reindeer_group) {
      if (g.full()) {
        s = s.deliver_toys();
        Workshop._reindeer_dispatch(g);
        Builtin.print("========================\n");
      };
      Workshop._deliver_toys(santa, reindeer_group);
    };
  }


  _elf_meet(v: (Elf & iso) | (None & imm)) {
    match v  {
      var n: None => None,
      var e: Elf => {
        e = e.meet_in_study();
        when() {
          (e.holiday()).ready();
        }
      }
    };
  }

  _elf_dispatch(g: Group[Elf] & mut) {
    var i = 0;
    while (i < 3) {
      Workshop._elf_meet(g.pop());
      i = i + 1;
    };
  }

  _meet_in_study(santa: cown[Santa] & imm, elf_group: cown[Group[Elf]] & imm) {
    when(var s = santa, var g = elf_group) {
      if (g.full()) {
        s.meet_in_study();
        Workshop._elf_dispatch(g);
        Builtin.print("========================\n");
      };
      Workshop._meet_in_study(santa, elf_group);
    };
  }
}

class Main {
  main() {
    Workshop.run();
  }
}
