/* Barrier with promises
 *   - This is a copy of barrier-internal-synch.verona
 */

class Barrier {
  _count: U64 & imm;
  _reset: U64 & imm;
  // Internal barrier to trigger all external barriers
  _barrier: Promise[None] & iso;

  create(count: U64 & imm): cown[Barrier] & imm {
    var result = new Barrier;
    result._count = count;
    result._reset = count;
    result._barrier = Promise.create();
    cown.create(result)
  }

  wait(barrier: cown[Barrier] & imm): cown[None] & imm {
    // External barrier for the waiter to wait on
    var promise = Promise.create();
    var handle = (mut-view promise).wait_handle();

    when (barrier) {
      // When the internal barrier triggers, trigger the external barrier, this
      // means that all external barriers trigger at the same time.
      when (var _ = (mut-view (barrier._barrier)).wait_handle()) {
        promise.fulfill(new None);
      };

      // Once the countdown hits zero, trigger the internal barrier
      barrier._count = barrier._count - 1;
      if (barrier._count == 0) {
        (barrier._barrier = Promise.create()).fulfill(new None);
        barrier._count = barrier._reset;
      }
    };

    handle
  }
}
