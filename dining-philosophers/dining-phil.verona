/* Solution to the dining philosophers problem
 *   -
 *
 *
 */

class Fork {
  count: U64 & imm;

  create(): cown[Fork] & imm {
    var result = new Fork;
    result.count = 0;
    cown.create(result)
  }

  use(self: mut) {
    self.count = self.count + 1;
  }
}

class Table {
  count: U64 & imm;

  // The table has a collection of forks and spoons
  f1: cown[Fork] & imm;
  f2: cown[Fork] & imm;
  f3: cown[Fork] & imm;
  f4: cown[Fork] & imm;
  f5: cown[Fork] & imm;

  create(f1: cown[Fork] & imm, f2: cown[Fork] & imm, f3: cown[Fork] & imm,
         f4: cown[Fork] & imm, f5: cown[Fork] & imm): cown[Table] & imm {
    var result = new Table;

    result.count = 5;

    result.f1 = f1;
    result.f2 = f2;
    result.f3 = f3;
    result.f4 = f4;
    result.f5 = f5;

    cown.create(result)
  }

  /*
   * When a Philosopher informs the table that they are finished, the table decrements the count
   * of philosophers still eating. If all have finished eating then print the final result.
   */
  finish(table: cown[Table] & imm, p: Philosopher & iso) {
    when (var t = table) {
      t.count = t.count - 1;

      if (t.count == 0) {
        when (var f1 = t.f1, var f2 = t.f2, var f3 = t.f3, var f4 = t.f4, var f5 = t.f5) {
          Builtin.print1("Fork 1 used {:#} time(s)\n", f1.count);
          Builtin.print1("Fork 2 used {:#} time(s)\n", f2.count);
          Builtin.print1("Fork 3 used {:#} time(s)\n", f3.count);
          Builtin.print1("Fork 4 used {:#} time(s)\n", f4.count);
          Builtin.print1("Fork 5 used {:#} time(s)\n", f5.count);
        };
      }
    }
  }
}

class Philosopher
{
  id: U64 & imm;
  hunger: U64 & imm;
  left: cown[Fork] & imm;
  right: cown[Fork] & imm;
  table: cown[Table] & imm;

  create(id: U64 & imm, left: cown[Fork] & imm, right: cown[Fork] & imm,
         table: cown[Table] & imm): Philosopher & iso {
    var result = new Philosopher;
    result.id = id;
    result.left = left;
    result.right = right;
    result.table = table;
    result
  }

  _eat(self: iso) {
    when (var l = self.left, var r = self.right) {
      Builtin.print1("Philosopher {:#} eats\n", self.id);
      if (self.hunger != 0) {
        l.use();
        r.use();
        self.hunger = self.hunger - 1;
        self._eat();
      } else {
        Builtin.print1("Philosopher {:#} finishes\n", self.id);
        Table.finish(self.table, self);
      }
    }
  }

  start(self: iso) {
    self.hunger = 10;
    self._eat();
  }
}

class Main {
  main() {
    // create the utensils
    var f1 = Fork.create();
    var f2 = Fork.create();
    var f3 = Fork.create();
    var f4 = Fork.create();
    var f5 = Fork.create();

    var table = Table.create(f1, f2, f3, f4, f5);

    var phil1 = Philosopher.create(1, f1, f2, table);
    var phil2 = Philosopher.create(2, f2, f3, table);
    var phil3 = Philosopher.create(3, f3, f4, table);
    var phil4 = Philosopher.create(4, f4, f5, table);
    var phil5 = Philosopher.create(5, f5, f1, table);

    phil1.start();
    phil2.start();
    phil3.start();
    phil4.start();
    phil5.start();
  }
}
