use "../common/event-callbacks.verona"

/* Channel built using a signal:
 * 
 * A Channel has a Queue of values, a Event object and read and write methods.
 * Calling read checks for a value in the queue, if there is one then the read
 * callback argument is immediately serviced.
 * Otherwise, a new callback is created and passed to the signal.
 * This callback checks if a value is in the queue and if so, calls the original
 * read callback, otherwise passes a new checking callback to the signal object.
 * When write is called, the passed value is appended to the queue and the signal
 * is signalled.
 */

/* Cell object so that values can be sent around in promises and extracted
 * later without losing iso access to them */
class Cell[T] {
  _data: (T & iso) | (None & imm);

  create(data: (T & iso) | (None & imm)): Cell[T] & iso {
    var result = new Cell;
    result._data = data;
    result
  }

  extract(self: mut): (T & iso) | (None & imm) {
    self._data = Builtin.freeze(new None)
  }

  read(self: mut): (T & iso) | (None & imm) where return in self {
    self._data
  }
}

/*
 * Callback class for capturing a cown of a channel and a read callback.
 * This callback checks a channels queue, if a value is present the read callback is called
 * with the value. Otherwise the channels signal is passed a new checking callback.
 */
class CheckQueue[T] {
  _chan: cown[Channel[T]] & imm;
  _node: (Callback1Node[Cell[T]] & iso) | (None & imm);

  create(chan: cown[Channel[T]] & imm, callback: Callback1Node[Cell[T]] & iso): CheckQueue[T] & iso {
    var result = new CheckQueue;
    result._chan = chan;
    result._node = callback;
    result
  }

  apply(self: mut) {
    match (self._node = None.create()) {
      var _: None => {} // This should not happen as the signal should not reuse this callback
      var n: Callback1Node[T] => {
        var chan = self._chan;
        when(var c = chan) {
          // check if a value is present and either call the read callback or wait again
          match (mut-view (c._queue)).remove() {
            var v: Cell[T] => { n.apply(v); }
            var _: None => { (mut-view (c._event)).await(CheckQueue.create(chan, n)); }
          }
        }
      }
    }
  }
}

/*
 * A channel with a queue of written values and signal for
 * storing read callbacks and signalling new values in the queue
 */
class Channel[T] {
  _queue: Queue[Cell[T]] & iso;
  _event: Event & iso;

  create(): cown[Channel[T]] & imm {
    var result = new Channel;
    result._queue = Queue.create(0);
    result._event = Event.create();
    cown.create(result)
  }

  // read a value from channel and call callback with the read value
  read(channel: cown[Channel[T]] & imm, callback: Callback1[Cell[T]] & iso) {
    when (var c = channel) {
      var value = (mut-view (c._queue)).remove();
      match (value) {
        // if we can immediately read a value then do
        var v: Cell[T] => { (mut-view callback).apply(v); }

        // otherwise create a callback that waits for a write to happen
        var _: None => {
          var check = CheckQueue.create(channel, Callback1Node.create(callback));
          (mut-view (c._event)).await(check);
        }
      };
    }
  }

  // write a value to channel and signal any waiting reads
  write(channel: cown[Channel[T]] & imm, value: T & iso) {
    when (var c = channel) {
      (mut-view (c._queue)).add(Cell.create(value));
      (mut-view (c._event)).signal();
    }
  }
}

/*
 * Example producer and consumer sharing a channel
 */
class Producer[T: iso] {
  _channel: cown[Channel[T]] & imm;

  create(channel: cown[Channel[T]] & imm): Producer[T] & iso {
    var result = new Producer;
    result._channel = channel;
    result
  }

  produce(self: mut, value: T) {
    Channel.write(self._channel, value);
  }
}

class Consume[T] {
  create(): Consume[T] & iso {
    new Consume
  }

  apply(self: mut, cell: Cell[T] & iso) {
    Builtin.print1("Received: {:#}\n", (mut-view cell).read());
  }
}

class Consumer[T] {
  _channel: cown[Channel[T]] & imm;

  create(channel: cown[Channel[T]] & imm): Consumer[T] & iso {
    var result = new Consumer;
    result._channel = channel;
    result
  }

  consume(self: mut) {
    Channel.read(self._channel, Consume.create());
  }
}

/* Create a producer and consumer that share a channel */
class Main {
  main() {
    var channel = Channel.create();

    var p = Producer.create(channel);
    var c = Consumer.create(channel);

    when() {
      (mut-view p).produce(U64Obj.create(0));
      (mut-view p).produce(U64Obj.create(1));
      (mut-view p).produce(U64Obj.create(2));
      (mut-view p).produce(U64Obj.create(3));
    };

    when() {
      (mut-view c).consume();
      (mut-view c).consume();
      (mut-view c).consume();
      (mut-view c).consume();
    };
  }
}