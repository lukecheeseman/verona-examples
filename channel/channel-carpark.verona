use "../common/list.verona"
use "../common/callbacks.verona"

class Cell[T] {
  _data: (T & iso) | (None & imm);

  create(data: T & iso): Cell[T] & iso {
    var result = new Cell;
    result._data = data;
    result
  }

  read(self: mut): (T & iso) | (None & imm) where return in self {
    self._data
  }

  extract(self: iso): (T & iso) | (None & imm) {
    self._data = Builtin.freeze(new None)
  }
}

/*
 * A channel has a queue of readers and a queue of writers.
 * Reading when the are Writers services the read, when there are Readers, enques
 * the read, when there are no Writers left in the queue of writers swaps the queue.
 * Similarly for Writers.
 */
class Channel[T] {
  reads: Queue[Callback1[Cell[T]]] & iso;
  writes: Queue[Cell[T]] & iso;

  create(): Channel[T] & iso {
    var result = new Channel;
    result.reads = Queue.create(0);
    result.writes = Queue.create(1);
    result
  }

  /*
   * Write a value to the channel
   */
  write(self: mut, value: T & iso) {
    if (self.reads).length > 0 {
      match (mut-view (self.reads)).remove() {
        var _: None => { /* we checked there were enough */ }
        var callback: Callback1[Cell[T]] & iso => { (mut-view callback).apply(Cell.create(value)); }
      }
    } else {
      (mut-view (self.writes)).add(Cell.create(value));
    }
  }

  /*
   * Read a value from the channel and call callback with that value.
   */
  read(self: mut, callback: Callback1[Cell[T]] & iso) {
    if (self.writes).length > 0 {
      match (mut-view (self.writes)).remove() {
        var _: None => { /* we checked there were enough */ }
        var value: Cell[T] => { (mut-view callback).apply(value); }
      }
    } else {
      (mut-view (self.reads)).add(callback);
    }
  }
}

class Consume[T] {
  create(): Consume[T] & iso {
    new Consume
  }

  apply(self: mut, cell: Cell[T] & iso) {
    Builtin.print1("Recieved: {:#}\n", (mut-view cell).read());
  }
}

class Main {
  main() {
    var channel = cown.create(Channel.create());

    when(channel) { channel.write(U64Obj.create(30)); };

    when(channel) { channel.read(Consume.create()); }

  }
}