class Node[T: iso | mut] {
  value: T | (None & imm);
  next: (Node[T] & mut) | (None & imm);
}

class List[T: iso | mut] {
  _head: (Node[T] & mut) | (None & imm);
  _size: U64;
  _none: (None & imm);

  _init(self: mut) {
    self._none = freeze (new None);
    self._head = self._none;
    self._size = 0;
  }

  create(): List[T] & iso {
    var result = new List;
    (mut-view result)._init();
    result
  }

  create_in(parent: mut): List[T] & mut {
    var result = new List in parent;
    result._init();
    result
  }

  push(self: mut, value: T) {
    self._head = self._push(self._head = self._none, value);
    self._size = self._size + 1;
  }

  _push(self: mut,
          current: (Node[T] & mut) | (None & imm),
          value: T): (Node[T] & mut) {
    match current
    {
      var e: None => {
        var node = new Node in self;
        node.value = value;
        node.next = self._none;
        node
      },
      var n: Node[T] => {
        n.next = self._push(n.next = self._none, value);
        n
      }
    }
  }

  pop(self: mut): T | (None & imm) {
    match (self._head = self._none) {
      var e: None => e,
      var n: Node[T] => {
        self._head = (n.next = self._none);
        self._size = self._size - 1;
        n.value = self._none
      }
    }
  }

  size(self: mut): U64 {
    self._size
  }
}

interface Task[T: iso | mut] {
  promise(self: mut): Promise[List[T]] & iso;
}

class DeliverToys {
  _santa: cown[Santa];

  create(santa: cown[Santa]): DeliverToys & iso {
    var result = new DeliverToys;
    result._santa = santa;
    result
  }

  _reindeer_deliver(v: (Reindeer & iso) | (None & imm)) {
    match v  {
      var n: None => None,
      var r: Reindeer => {
        r = r.deliver_toys();
        r.holiday();
      }
    };
  }

  promise(self: mut): Promise[List[Reindeer & iso]] & iso {
    var p = Promise.create();
    var g = (mut-view p).wait_handle();
    when (g, var s = self._santa) {
      s.deliver_toys();
      // This is kind of odd as each reindeer delivers a toy and then goes
      // on holiday. Should probably be, all deliver and then all go on holiday.
      while g.size() > 0 {
        DeliverToys._reindeer_deliver(g.pop());
      };
      Builtin.print("=============================\n");
    };
    p
  }
}

class MeetInStudy {
  _santa: cown[Santa];

  create(santa: cown[Santa]): MeetInStudy & iso {
    var result = new MeetInStudy;
    result._santa = santa;
    result
  }

  _elf_meet(v: (Elf & iso) | (None & imm)) {
    match v  {
      var n: None => None,
      var e: Elf => {
        e = e.meet_in_study();
        e.work();
      }
    };
  }

  promise(self: mut): Promise[List[Elf & iso]] & iso {
    var p = Promise.create();
    var g = (mut-view p).wait_handle();
    when (g, var s = self._santa) {
      s.meet_in_study();
      while g.size() > 0 {
        MeetInStudy._elf_meet(g.pop());
      };
      Builtin.print("=============================\n");
    };
    p
  }
}

class Group[T: mut | iso] {
  _capacity: U64;
  _promise: Promise[List[T]] & iso;
  _task: Task[T] & iso;
  _data: List[T] & iso;

  create(capacity: U64, task: Task[T] & iso): Group[T] & iso {
    var result = new Group;
    result._capacity = capacity;
    result._promise = (mut-view task).promise();
    result._task = task;
    result._data = List.create();
    result
  }

  full(self: mut): U64 {
    (mut-view (self._data)).size() >= self._capacity
  }

  add(self: mut, value: T) {
    (mut-view (self._data)).push(value);
    if self.full() {
      var t = mut-view (self._task);
      var p = (self._promise = t.promise());
      p.fulfill(self._data = List.create())
    } else {
    }
  }

  remove(self: mut): T | (None & imm) {
    (mut-view (self._data)).pop()
  }

  capacity(self: iso): U64 {
    self._capacity
  }
}

class Reindeer {
  _group: cown[Group[Reindeer & iso]];
  _id: U64;

  create(group: cown[Group[Reindeer & iso]], id: U64) {
    var result = new Reindeer;
    result._group = group;
    result._id = id;
    result.ready();
  }

  ready(self: iso) {
    when (var g = self._group) {
      g.add(self);
    }
  }

  holiday(self: iso) {
    // This should be some sleep
    when() {
      var i = 0;
      while (i < 2000000) {
        i = i + 1;
      };
      self.ready();
    }
  }

  deliver_toys(self: iso): Reindeer & iso {
    Builtin.print1("Reindeer {:#} is delivering toys\n", self._id);
    self
  }
}

class Elf {
  _group: cown[Group[Elf & iso]];
  _id: U64;

  create(group: cown[Group[Elf & iso]], id: U64) {
    var result = new Elf;
    result._group = group;
    result._id = id;
    result.ready();
  }

  ready(self: iso) {
    when (var g = self._group) {
      g.add(self);
    }
  }

  work(self: iso) {
    // This should be some sleep
    when() {
      var i = 0;
      while (i < 2000000) {
        i = i + 1;
      };
      self.ready();
    }
  }

  meet_in_study(self: iso): Elf & iso {
    Builtin.print1("Elf {:#} is meeting in study\n", self._id);
    self
  }
}

class Santa {
  create(): Santa & iso {
    new Santa
  }

  deliver_toys(self: mut) {
    Builtin.print("Santa is delivering toys\n");
  }

  meet_in_study(self: mut) {
    Builtin.print("Santa is meeting in study\n");
  }
}

class Workshop {
  run() {
    var santa = cown(Santa.create());

    var rt = DeliverToys.create(santa);
    var rg = cown(Group.create(9, rt));

    var i = 0;
    while i < 9 {
      Reindeer.create(rg, i);
      i = i + 1;
    };

    var et = MeetInStudy.create(santa);
    var eg = cown(Group.create(3, et));
    i = 0;
    while i < 10 {
      Elf.create(eg, i);
      i = i + 1;
    }
  }
}

class Main {
  main() {
    Workshop.run();
  }
}
