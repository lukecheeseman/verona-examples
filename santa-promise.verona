class Node[T: iso | mut] {
  value: T | (None & imm);
  next: (Node[T] & mut) | (None & imm);
}

class List[T: iso | mut] {
  _head: (Node[T] & mut) | (None & imm);
  _size: U64;
  _none: (None & imm);

  _init(self: mut) {
    self._none = freeze (new None);
    self._head = self._none;
    self._size = 0;
  }

  create(): List[T] & iso {
    var result = new List;
    (mut-view result)._init();
    result
  }

  create_in(parent: mut): List[T] & mut {
    var result = new List in parent;
    result._init();
    result
  }

  push(self: mut, value: T) {
    self._head = self._push(self._head = self._none, value);
    self._size = self._size + 1;
  }

  _push(self: mut,
          current: (Node[T] & mut) | (None & imm),
          value: T): (Node[T] & mut) {
    match current
    {
      var e: None => {
        var node = new Node in self;
        node.value = value;
        node.next = self._none;
        node
      },
      var n: Node[T] => {
        n.next = self._push(n.next = self._none, value);
        n
      }
    }
  }

  pop(self: mut): T | (None & imm) {
    match (self._head = self._none) {
      var e: None => e,
      var n: Node[T] => {
        self._head = (n.next = self._none);
        self._size = self._size - 1;
        n.value = self._none
      }
    }
  }

  size(self: mut): U64 {
    self._size
  }
}

class ReindeerGroup {
  _capacity: U64;
  _data: List[Reindeer & iso] & iso;
  _promise: Promise[List[Reindeer & iso]] & iso;

  _reindeer_deliver(v: (Reindeer & iso) | (None & imm)) {
    match v  {
      var n: None => None,
      var r: Reindeer => {
        r = r.deliver_toys(); 
        r.graze();
      }
    };
  }

  _create_promise(self: mut): Promise[List[Reindeer & iso]] & iso {
    var p = Promise.create();
    var g = (mut-view p).wait_handle();
    when (g) {
      ReindeerGroup._reindeer_deliver(g.pop());
      ReindeerGroup._reindeer_deliver(g.pop());
      ReindeerGroup._reindeer_deliver(g.pop());
      ReindeerGroup._reindeer_deliver(g.pop());
    };
    p
  }

  create(capacity: U64): ReindeerGroup & iso {
    var result = new ReindeerGroup;
    result._capacity = capacity;
    result._promise = (mut-view result)._create_promise();
    result._data = List.create();
    result
  }

  full(self: mut): U64 {
    (mut-view (self._data)).size() >= self._capacity
  }

  add(self: mut, value: Reindeer & iso) {
    (mut-view (self._data)).push(value);
    if self.full() {
      var p = (self._promise = self._create_promise());
      p.fulfill(self._data = List.create())
    } else {
    }
  }

  remove(self: mut): (Reindeer & iso) | (None & imm) {
    (mut-view (self._data)).pop()
  }

  capacity(self: iso): U64 {
    self._capacity
  }
}

class Reindeer {
  _group: cown[ReindeerGroup];
  _id: U64;

  create(group: cown[ReindeerGroup], id: U64) {
    var result = new Reindeer;
    result._group = group;
    result._id = id;
    result.ready();
  } 

  ready(self: iso) {
    when (var g = self._group) {
      g.add(self);
    }
  }

  graze(self: iso) {
    // This should be some sleep
    when() {
      var i = 0;
      while (i < 2000000) {
        i = i + 1;
      };
      self.ready();
    }
  }

  deliver_toys(self: iso): Reindeer & iso {
    Builtin.print1("Reindeer {:#} is delivering toys\n", self._id);
    self
  }
}

class Santa {
  create(): Santa & iso {
    new Santa
  }

  deliver_toys(self: mut) {
    Builtin.print("Santa is delivering toys\n");
  }
}
class Workshop {
  run() {
    var santa = cown(Santa.create());

    var rg = cown(ReindeerGroup.create(4));

    Reindeer.create(rg, 0);
    Reindeer.create(rg, 1);
    Reindeer.create(rg, 2);
    Reindeer.create(rg, 3);
  }
}

class Main {
  main() {
    Workshop.run();
  }
}
