/*****************************************************************************
 * This example demonstrates an example solution to the santa problem that
 * follows (orginally found in Benton, Nick. "Jingle bells: Solving the santa
 * claus problem in polyphonic c#."):
 *
 *  In this problem there are:
 *  - 1 Santa
 *  - 9 Reindeer
 *  - 7 Elves
 *
 *  - When Santa and 9 Reindeer are available then they should be taken
 *    (making them unavailable) and deliver presents. When they are
 *    finished, Santa becomes available again and the Reindeers each go on
 *    holiday, becoming available again when they come back from holiday.
 *
 *  - When Santa and 7 Elves are available then they should be taken
 *    (making them unavailable) and meet in the study. When they are
 *    finished, Santa becomes available again and the Elves each go to
 *    work, becoming available again when they finish working.
 *
 * Note: this solution does not prioritise Reindeer over Elves if there are
 * enough of either group to peform an action.
 *
 * This solution demonstrates using cowns and pools; requesting N resources
 * from a Pool of M resources (but which N does not matter).
 *
 *****************************************************************************/
use "group.verona"

/* Interface to abstract the Reindeer and the Elf */
interface Helper {
  sleep(self: mut);
  act(self: mut);
}

class Reindeer {
  _id: U64 & imm;

  create(id: U64 & imm): Reindeer & iso {
    var result = new Reindeer;
    result._id = id;
    result
  }

  /* Reindeer goes on holiday */
  sleep(self: mut) {
    Builtin.print1("Reindeer {:#} is on holiday\n", self._id);
    // Do some work to keep the Reindeer busy */
    var i = 0;
    while (i < 2000) {
      i = i + 1;
    };
  }

  /* Reindeer delivers toys */
  act(self: mut) {
    Builtin.print1("Reindeer {:#} is delivering toys\n", self._id);
  }
}

class Elf {
  _id: U64 & imm;

  create(id: U64 & imm): Elf & iso {
    var result = new Elf;
    result._id = id;
    result
  }

  /* Elf does some work */
  sleep(self: mut) {
    Builtin.print1("Elf {:#} is working\n", self._id);
    // Do some work to keep the Elf busy */
    var i = 0;
    while (i < 2000) {
      i = i + 1;
    };
  }

  /* Elf meets in the study */
  act(self: mut) {
    Builtin.print1("Elf {:#} is meeting in study\n", self._id);
  }
}

class Santa {
  create(): cown[Santa] & imm {
    cown.create(new Santa)
  }

  /* Santa meets in the study */
  meet_in_study(self: mut) {
    Builtin.print("Santa is meeting in study\n");
  }

  /* Santa delivers toys */
  deliver_toys(self: mut) {
    Builtin.print("Santa is delivering toys\n");
  }
}

class Workshop {
  /*
   * Iterate over all the helpers in the queue and call their action and then
   * have them asynchronously wait. Once they have finished waiting they will
   * be returned to their Pool (as their wrapping Resource will be finalised).
   */
  _dispatch_helpers[H: Helper](qhelper: Queue[Resource[H]] & iso) {
    match (mut-view qhelper).remove() {
      var _: None => {} // no more helpers left to dispatch
      var helper: Resource[H] => {
        // run this helpers action
        (mut-view ((mut-view helper).use())).act();
        // asynchronously sleep (i.e. work or holiday), this passes the
        // resource into the behaviour meaning that it will be finalised
        // when then the hepler finishes sleeping and will automatically
        // be returned to their pool of helpers.
        when () {
          (mut-view ((mut-view helper).use())).sleep();
        };
        Workshop._dispatch_helpers(qhelper);
      }
    };
  }

  /*
   * Repeatedly deliver toys and re-schedules the same action.
   */
  deliver_toys(santa: cown[Santa] & imm, reindeer: cown[Pool[Reindeer]] & imm) {
    // When santa and 9 reindeer are available deliver toys, then santa
    // becomes available and the 9 reindeer go on holiday and become
    // available again once they return from holiday.
    when(var s = santa, var group = Pool.request(reindeer, 9)) {
      Builtin.print("------------------------------------\n");
      s.deliver_toys();
      Workshop._dispatch_helpers(group.extract());
    };

    // Put this in a when block as we don't want to call this synchronously,
    // if we did then it would inifitely call itself and never release a
    // thread, but we also don't need to wait for the previous behaviour
    // to finish before scheduling the same behaviour again.
    when() {
      Workshop.deliver_toys(santa, reindeer);
    }
  }

  /*
   * Similar to deliver_toys so see that function for comments
   */
  meet_in_study(santa: cown[Santa] & imm, elves: cown[Pool[Elf]] & imm) {
    when(var s = santa, var group = Pool.request(elves, 3)) {
      Builtin.print("------------------------------------\n");
      s.meet_in_study();
      Workshop._dispatch_helpers(group.extract());
    };

    when() {
      Workshop.meet_in_study(santa, elves);
    }
  }

  create() {
    // create santa
    var santa = Santa.create();

    // create the 9 reindeer
    var reindeer = Pool.create();
    var i = 0;
    while (i < 9) {
      i = i + 1;
      Pool.add(reindeer, Cell.create(Reindeer.create(i)));
    };

    // create the 7 elves
    var elves = Pool.create();
    i = 0;
    while (i < 7) {
      i = i + 1;
      Pool.add(elves, Cell.create(Elf.create(i)));
    };

    // Call two methods that will start the Workshop functioning.
    Builtin.print("Running the workshop\n");

    // Repeatedly schedules DeliverToys behaviours to request santa and
    // 9 Reindeer from the ReindeerPool. Once the resources are acquired,
    // the Reindeer will deliver toys and then, asynchronously, go on holiday.
    // Finally, returning back to the original Pool of Reindeer.
    Workshop.deliver_toys(santa, reindeer);

    // Similarly, repeatedly schedule MeetInStudy behaviour to request
    // santa and 3 out of 7 elves. Once the resources are acquired, the Elves
    // will meet in the study and then, asynchronously, go to work. Finally,
    // returning back to the original Pool of Elves.
    Workshop.meet_in_study(santa, elves);
  }
}

class Main {
  main() {
    // Set everything in motion.
    Workshop.create();
  }
}
